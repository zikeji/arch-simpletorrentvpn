name: docker-build

on:
  schedule:
    - cron: '0 * * * *' # run occasionally to check if new release on boypt/simple-torrent
  push:
    branches: master
    tags:
      - v*

jobs:
  buildx:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout repo
        uses: actions/checkout@v2
      -
        name: Prepare variables and run schedule check
        id: prepare
        run: |
          DOCKER_IMAGE=zikeji/arch-simpletorrentvpn
          DOCKER_PLATFORMS=linux/amd64,linux/arm64
          SHOULD_CANCEL="no"
          VERSION=latest

          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi

          if [ "${{ github.event_name }}" = "schedule" ]; then
            LATEST_REPO_VERSION=$(curl -sI https://github.com/boypt/simple-torrent/releases/latest | grep location | grep -E -o '[0-9\.]{5,}')
            LATEST_HUB_VERSION=$(curl https://hub.docker.com/v2/repositories/zikeji/arch-simpletorrentvpn/tags 2>/dev/null | tac | jq -r '[.results[] | select(.name | test("^[0-9]"))] | sort_by(.name | split(".") | map(tonumber)) | reverse | first | .name')
            if [[ "$LATEST_REPO_VERSION" == "$LATEST_HUB_VERSION" ]]; then
              SHOULD_CANCEL="yes"
            fi
          fi

          TAGS="--tag ${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS --tag ${DOCKER_IMAGE}:latest"
          fi

          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=should_cancel::${SHOULD_CANCEL}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=buildx_args::--platform ${DOCKER_PLATFORMS} \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${GITHUB_SHA::8} \
            ${TAGS} --file ./Dockerfile ./
      -
        name: Cancel workflow run if needed
        uses: actions/github-script@v3
        if: steps.prepare.outputs.should_cancel == 'yes'
        with:
          script: |
            const { owner, repo } = context.repo
            console.log('Cancelling ...');
            const run_id = "${{ github.run_id }}";
            await github.actions.cancelWorkflowRun({ owner, repo, run_id });
      -
        name: Waiting for cancellation
        run: sleep 60
        if: steps.prepare.outputs.should_cancel == 'yes'
      - name: Should continue?
        run: test "${{ steps.prepare.outputs.should_cancel }}" = "yes"
      - 
        name: Push README to DockerHub
        uses: christian-korneck/update-container-description-action@v1
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASSWORD }}
        with:
          destination_container_repo: zikeji/arch-simpletorrentvpn
          provider: dockerhub
          short_description: 'Arch Linux base by binhex running SimpleTorrent, OpenVPN and Privoxy'
          readme_file: 'README.md'
      -
        name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v3
      -
        name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Docker Buildx (build)
        run: |
          docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}
      -
        name: Login to DockerHub
        if: success() && github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Docker Buildx (push)
        if: success() && github.event_name != 'pull_request'
        run: |
          docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}
      -
        name: Inspect image
        if: success() && github.event_name != 'pull_request'
        run: |
          docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}